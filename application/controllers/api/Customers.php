<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . '/libraries/REST_Controller.php';

// use namespace
use Restserver\Libraries\REST_Controller;

class Customers extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

		// Load database
		$this->load->model('Customer_Model','customer_model');
		
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['customers_get']['limit'] = 10000; // 500 requests per hour per user/key
        $this->methods['customers_post']['limit'] = 1000; // 100 requests per hour per user/key
        $this->methods['customers_put']['limit'] = 1000; // 100 requests per hour per user/key
        $this->methods['customers_delete']['limit'] = 1000; // 50 requests per hour per user/key
    }

    public function customers_get()
    {

        $id = $this->get('id');
		$id = (int) $id;
		// Validate the id.
            if ($id <= 0)
            {
                // Invalid id, set the response and exit.
                $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
            }
			
        	// Users from a data store e.g. database
		$users = $this->customer_model->getCustomers($id);

            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        
    }

    public function customers_post()
    {
		$data=array(
				'Cust_Name'=>$this->post('name'),
				'Cust_Address'=>$this->post('address'),
				'Cust_Email'=>$this->post('email'),
				'Cust_Number'=>$this->post('number')
		);
         $this->customer_model->addCustomer($data);
         $message = [
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a Customer'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code */
    }

	
    public function customers_put($id)
    {
		
        //$id = $this->get('id');
		$id = (int) $id;
		
        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

		$data=array(
				'Cust_Name'=>$this->put('name'),
				'Cust_Address'=>$this->put('address'),
				'Cust_Email'=>$this->put('email'),
				'Cust_Number'=>$this->put('number')
		);
         $this->customer_model->updateCustomer($id,$data);
         $message = [
            'id' => $id, // Automatically generated by the model
            'name' => $this->put('name'),
            'email' => $this->put('email'),
            'message' => 'Customer Updated Successfully! '
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code */
    }
	
    public function customers_delete($id)
    {
        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $this->customer_model->deleteCustomer($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted Customer Successfully'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code */
    }
	
	

}
